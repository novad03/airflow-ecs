# CFN stack `airflow-ecs`

AWSTemplateFormatVersion: 2010-09-09
Description: Infrastructure to run Airflow in ECS

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-00129b193dc81bc31
    us-east-2:
      AMIID: ami-028a9de0a7e353ed9
    eu-west-1:
      AMIID: ami-0af844a965e5738db

Resources:

  AirflowVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: airflow-ecs-vpc

  AirflowInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: airflow-ecs-igtw

  AirflowAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: AirflowVPC
      InternetGatewayId:
        Ref: AirflowInternetGateway

  AirflowPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: AirflowVPC
      Tags:
      - Key: Name
        Value: airflow-plublic-rt

  AirflowSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AirflowVPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: airflow-1a-ecs

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AirflowInternetGateway
      RouteTableId: !Ref AirflowPublicRouteTable

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AirflowPublicRouteTable
      SubnetId: !Ref AirflowSubnet1a

  AirflowSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EcsSecurityGroup
      GroupDescription: EcsSecurityGroup
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      VpcId: !Ref AirflowVPC
      Tags:
        - Key: Name
          Value: airflow-ecs-sg

  AirflowECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: airflow

  EcsInstanceLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      InstanceType: 'm5.xlarge'
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref AirflowEC2InstanceProfile
      SecurityGroups: [ !Ref AirflowSecurityGroup ]
      BlockDeviceMappings:
      - DeviceName: '/dev/xvdcz'
        Ebs:
         VolumeSize: '25'
         VolumeType: 'gp2'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${AirflowECSCluster} >> /etc/ecs/ecs.config
          echo ECS_BACKEND_HOST="" >> /etc/ecs/ecs.config

  EcsInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref AirflowSubnet1a
      LaunchConfigurationName: !Ref EcsInstanceLaunchConfiguration
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 1
      Tags:
        -
          Key: Name
          Value: !Sub "ecs-instance-${AirflowECSCluster}"
          PropagateAtLaunch: 'true'

  AirflowEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AirflowECSRole

  AirflowECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ecs:*
                Effect: Allow
                Resource: "*"
                Sid: ecs
              - Action:
                  - ecr:*
                Effect: Allow
                Resource: "*"
                Sid: ecr
              - Action:
                  - s3:*
                Effect: Allow
                Resource: "*"
              - Action:
                  - logs:*
                Effect: Allow
                Resource: "*"
                Sid: s3
          PolicyName: AirflowRolePolicy

  AirflowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/ecs/airflow'
      RetentionInDays: 30

  AirflowTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: airflow-ecs
      RequiresCompatibilities:
        - "EC2"
      ContainerDefinitions:
        - Name: "postgres"
          Image: "postgres:10.4"
          Memory: 2000
          Cpu: 1000
          Essential: "true"
          Environment:
            - Name: "POSTGRES_USER"
              Value: "airflow"
            - Name: "POSTGRES_PASSWORD"
              Value: "airflow"
            - Name: "POSTGRES_DB"
              Value: "airflow"
            - Name: "POSTGRES_PORT"
              Value: "5432"
          PortMappings:
            - ContainerPort: 5432
              HostPort: 5432
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref AirflowLogGroup
              awslogs-region: 'us-east-1'
              awslogs-stream-prefix: 'postgres'

        - Name: "redis"
          Image: "redis:4.0.10"
          Memory: 500
          Cpu: 500
          Essential: "true"
          Command:
            - "redis-server"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref AirflowLogGroup
              awslogs-region: 'us-east-1'
              awslogs-stream-prefix: 'redis'

        - Name: "webserver"
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/airflow-ecs:latest'
          Memory: 1000
          Cpu: 500
          Essential: "true"
          Command:
            - "webserver"
          Links:
            - postgres
            - redis
          Environment:
            - Name: "REDIS_HOST"
              Value: "redis"
            - Name: "REDIS_PORT"
              Value: "6379"
            - Name: "POSTGRES_HOST"
              Value: "postgres"
            - Name: "POSTGRES_PORT"
              Value: "5432"
            - Name: "POSTGRES_USER"
              Value: "airflow"
            - Name: "POSTGRES_PASSWORD"
              Value: "airflow"
            - Name: "POSTGRES_DB"
              Value: "airflow"
            - Name: "FERNET_KEY"
              Value: "5wdl5ArK00jIAFZPvDNpV4_TmLAPCht1z-JDJFfdFsw="
            - Name: "STAGE"
              Value: "dev"
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref AirflowLogGroup
              awslogs-region: 'us-east-1'
              awslogs-stream-prefix: 'webserver'

        - Name: "scheduler"
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/airflow-ecs:latest'
          Memory: 1000
          Cpu: 500
          Essential: "true"
          Command:
            - "scheduler"
          Links:
            - postgres
            - redis
          Environment:
            - Name: "REDIS_HOST"
              Value: "redis"
            - Name: "REDIS_PORT"
              Value: "6379"
            - Name: "POSTGRES_HOST"
              Value: "postgres"
            - Name: "POSTGRES_PORT"
              Value: "5432"
            - Name: "POSTGRES_USER"
              Value: "airflow"
            - Name: "POSTGRES_PASSWORD"
              Value: "airflow"
            - Name: "POSTGRES_DB"
              Value: "airflow"
            - Name: "FERNET_KEY"
              Value: "5wdl5ArK00jIAFZPvDNpV4_TmLAPCht1z-JDJFfdFsw="
            - Name: "STAGE"
              Value: "dev"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref AirflowLogGroup
              awslogs-region: 'us-east-1'
              awslogs-stream-prefix: 'scheduler'

        - Name: "worker"
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/airflow-ecs:latest'
          Memory: 1000
          Cpu: 500
          Essential: "true"
          Command:
            - "worker"
          Links:
            - postgres
            - redis
          Environment:
            - Name: "REDIS_HOST"
              Value: "redis"
            - Name: "REDIS_PORT"
              Value: "6379"
            - Name: "POSTGRES_HOST"
              Value: "postgres"
            - Name: "POSTGRES_PORT"
              Value: "5432"
            - Name: "POSTGRES_USER"
              Value: "airflow"
            - Name: "POSTGRES_PASSWORD"
              Value: "airflow"
            - Name: "POSTGRES_DB"
              Value: "airflow"
            - Name: "FERNET_KEY"
              Value: "5wdl5ArK00jIAFZPvDNpV4_TmLAPCht1z-JDJFfdFsw="
            - Name: "STAGE"
              Value: "dev"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref AirflowLogGroup
              awslogs-region: 'us-east-1'
              awslogs-stream-prefix: 'worker'

        - Name: "flower"
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/airflow-ecs:latest'
          Memory: 500
          Cpu: 100
          Command:
            - "flower"
          Links:
            - postgres
            - redis
          Environment:
            - Name: "REDIS_HOST"
              Value: "redis"
            - Name: "REDIS_PORT"
              Value: "6379"
            - Name: "POSTGRES_HOST"
              Value: "postgres"
            - Name: "POSTGRES_PORT"
              Value: "5432"
            - Name: "POSTGRES_USER"
              Value: "airflow"
            - Name: "POSTGRES_PASSWORD"
              Value: "airflow"
            - Name: "POSTGRES_DB"
              Value: "airflow"
            - Name: "FERNET_KEY"
              Value: "5wdl5ArK00jIAFZPvDNpV4_TmLAPCht1z-JDJFfdFsw="
            - Name: "STAGE"
              Value: "dev"
          PortMappings:
            - ContainerPort: 5555
              HostPort: 5555
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref AirflowLogGroup
              awslogs-region: 'us-east-1'
              awslogs-stream-prefix: 'flower'

  AirflowService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref AirflowECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref AirflowTaskDefinition

Outputs:
  AirflowECSClusterARN:
    Description: The ARN of the ECS cluster where to run Airflow
    Value: !GetAtt AirflowECSCluster.Arn
    Export:
      Name: AirflowECSClusterARN
